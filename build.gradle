plugins {
	id 'java'
	id 'jacoco'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.liquibase.gradle' version '2.2.0'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'


java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(23)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-web:3.3.4'
	implementation 'org.springframework.boot:spring-boot-starter-logging:3.3.4'
	implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.2'
	implementation 'jakarta.validation:jakarta.validation-api:3.1.0'
	implementation 'io.projectreactor:reactor-core:3.6.11'
	implementation 'org.postgresql:postgresql:42.7.2'


	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.testcontainers:testcontainers'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'

	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}




test {
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	reports {
		xml.required = false
		csv.required = false
		html.required = true
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(it) {
				exclude '**/dto/**'
			}
		}))
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.7
			}
		}
	}
}